{"version":3,"sources":["Page/Page.js","NavBar/NavBar.js","Components/SignupNav.js","Components/Header.js","Components/Footer.js","svgs/home_illustration.svg","illustrations/Home_illustration.js","Home/Home.js","svgs/login_illustration.svg","illustrations/Login_illustration.js","svgs/error_illustration.svg","illustrations/Error_illustration.js","UserPool.js","Login/Login.js","Search/Search.js","svgs/robin_logo.svg","svgs/checklist_illustration.svg","illustrations/Checklist.js","SignUp/SignUp.js","Onboarding/Util.js","Onboarding/Project/ProjectInputOnboarding.js","Onboarding/Project/ProjectCard.js","Onboarding/Project/ProjectsOnboarding.js","Pill/Pill.js","Onboarding/Skills/SkillsOnboarding.js","Onboarding/Experience/ExperienceInputOnboarding.js","Onboarding/Experience/JobCard.js","Onboarding/Experience/ExperienceOnboarding.js","Onboarding/Education/EducationInputOnboarding.js","Onboarding/Education/EducationCard.js","Onboarding/Education/EducationOnboarding.js","Onboarding/General/GeneralOnboarding.js","Onboarding/OnboardingMenu.js","Onboarding/OnboardingPage.js","svgs/mailbox_illustration.svg","illustrations/Mailbox_illustration.js","PDF/PDF.js","SignUp/Verify.js","Results/JobCardResult.js","Results/Loading.js","Results/Results.js","App/App.js","reportWebVitals.js","index.js"],"names":["Page","props","Container","children","NavBar","state","loggedIn","sessionStorage","getItem","e","preventDefault","document","getElementById","style","width","className","id","height","viewBox","fill","xmlns","d","mixBlendMode","cx","cy","r","onClick","handleOpen","x","y","Nav","Link","handleClose","aria-label","aria-hidden","as","eventKey","to","this","clear","React","Component","Col","Row","Header","justifyContent","md","Home_illustration","src","illustration","size","Home","Button","variant","Logo","Error_illustration","CognitoUserPool","UserPoolId","ClientId","Login","validationSchema","yup","email","required","password","logedIn","wrongPassword","notConfirmed","onboarded","checkedOnboarding","params","console","log","axios","get","then","res","undefined","data","setState","value","user","CognitoUser","Username","Pool","UserPool","authDetails","AuthenticationDetails","Password","authenticateUser","onSuccess","setItem","hasOnboarded","onFailure","err","error","name","newPasswordRequired","initialValues","onSubmit","values","handleSubmit","errors","touched","handleChange","handleBlur","Form","Group","controlId","Label","Control","type","onChange","onBlur","isValid","isInvalid","Text","Search","url","search","replaceAll","placeholder","Checklist","SignUp","matches","confirm_password","oneOf","signedUp","alreadyExists","signUp","DateToDBDate","date","month","year","length","substring","ProjectInputOnboarding","start_date","end_date","min","about","max","max_words","informationPosted","position","post","catch","ProjectCard","Card","Body","Title","Subtitle","ProjectsOnboarding","projects","onUserDataUpdate","map","project","title","description","display","Pill","useState","visible","setVisible","Badge","pill","index","array","indexOf","splice","removeSkill","SkillsOnboarding","current_skill","skills_array","handleClick","bind","skills","join","keyCode","new_skills","concat","trim","target","skill","marginTop","skills_input","onKeyPress","handleKeypress","EducationInputOnboarding","company","city","rel_achievements","relevant_achievements","JobCard","EducationOnboarding","jobs","job","school","degree","field_of_study","graduation_date","gpa","moreThan","lessThan","honors","rel_course_work","activities","coursework","Accordion","Toggle","Collapse","EducationCard","educations","edu","major","GeneralOnboarding","phone","website","linkedin","github","postValues","webstie","InputGroup","Prepend","FormControl","OnboardingMenu","location","useLocation","activeKey","pathname","label","link","OnboardingPageFilled","progress","disabled","OnboardingNumber","number","includes","OnboardingPage","setProgress","from","setFrom","useRouteMatch","path","handleUserDataUpdate","obj","origin","component","ExperienceInputOnboarding","ProjectsInputOnboarding","lines_to_print","Verify","font","font_size","center","doc_width","margin","max_line_width","one_line_height","max_printed_lines","lines_printed","current_y","doc","jsPDF","user_email","desc","a","order","getUserData","contact","githubUsername","linkedInUsername","linkedIn","education","experience","formatted_phone","slice","setFont","setFontSize","text","align","update_y","content","printEducation","printSkills","printExperience","prj","printProject","save","num_lines","comma_sep_list","splitTextToSize","calcTitleLength","country","dateToText","titles","achievements","longest_printed_word","Object","keys","sort","b","entries","key","printTitledList","list","indent_size","hanging_indent","title_length","bolded","getTextWidth","printBulletedList","indent","delimiter","sentences","split","num_of_lines","long_sentences","sent","temp_arr","push","format","months","formatted_date","parseInt","score","createResume","Loading","Spinner","animation","Results","match","Description","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.03750069.chunk.js","sourcesContent":["import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport default function Page(props) {\n    return (\n        <Container>\n            {props.children}\n        </Container>\n    );\n}","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport './NavBar.scss';\n\nexport default class NavBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: sessionStorage.getItem('loggedIn')\n        }\n    }\n\n    handleOpen(e) {\n        e.preventDefault();\n        document.getElementById('nav').style.width = \"18rem\";\n    }\n\n    handleClose(e) {\n        e.preventDefault();\n        document.getElementById('nav').style.width = \"0\";\n    }\n\n    render() {\n        return(\n            <div className=\"robin-navbar\">\n                <svg id=\"nav-logo\" width=\"273\" height=\"84\" viewBox=\"0 0 273 84\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g id=\"robin\">\n                        <path d=\"M72 77.9H81.8V56.1C81.8 53.3 81.8 49.3 84.5 46.4C86.4 44.4 88.5 44.1 90.6 44.1C91.6 44.1 93.4 44.2 95.6 45.6L99.6 36.7C96.9 35.1 94.3 34.7 91.9 34.7C89.7 34.7 87.8 35 85.9 36.1C84.5 36.9 82.9 38.3 81.8 39.6V35.8H72V77.9Z\" fill=\"#6153AE\"/>\n                        <path d=\"M123.55 34.7C110.85 34.7 101.05 43.9 101.05 56.9C101.05 69.8 110.85 79.2 123.55 79.2C136.25 79.2 146.05 69.8 146.05 56.9C146.05 43.9 136.25 34.7 123.55 34.7ZM123.55 70.4C115.85 70.4 111.05 65.1 111.05 57C111.05 47.4 117.35 43.5 123.55 43.5C129.75 43.5 136.05 47.4 136.05 57C136.05 65.1 131.25 70.4 123.55 70.4Z\" fill=\"#6153AE\"/>\n                        <path d=\"M166.077 5H156.277V77.9H166.077V73.5C170.377 78.5 175.677 79.2 178.677 79.2C191.677 79.2 199.077 68.4 199.077 56.8C199.077 43.1 189.677 34.7 178.577 34.7C175.477 34.7 170.077 35.5 166.077 40.7V5ZM177.377 43.5C184.477 43.5 189.077 49.5 189.077 57C189.077 64.3 184.477 70.4 177.377 70.4C171.177 70.4 165.477 65.9 165.477 57.1C165.477 47.9 171.177 43.5 177.377 43.5Z\" fill=\"#6153AE\"/>\n                        <path d=\"M209.305 35.8V77.9H219.105V35.8H209.305ZM207.905 18.4C207.905 22 210.605 24.7 214.205 24.7C217.805 24.7 220.505 22 220.505 18.4C220.505 14.8 217.805 12.1 214.205 12.1C210.605 12.1 207.905 14.8 207.905 18.4Z\" fill=\"#6153AE\"/>\n                        <path d=\"M231.373 77.9H241.173V57.7C241.173 44.1 245.673 43.5 250.073 43.5C253.773 43.5 257.773 43.8 257.773 54.5V77.9H267.573V52.1C267.573 45.6 266.573 42.7 264.973 40.4C263.673 38.6 260.373 34.7 252.573 34.7C250.173 34.7 245.373 35 241.173 39.7V35.8H231.373V77.9Z\" fill=\"#6153AE\"/>\n                        <g style={{mixBlendMode: \"lighten\"}}>\n                            <circle cx=\"214.175\" cy=\"18.425\" r=\"6.425\" fill=\"#73C1CE\"/>\n                        </g>\n                    </g>\n                    <g id=\"logo-hamburger\" className=\"hamburger\" onClick={(e) => this.handleOpen(e)}>\n                        <rect x=\"5\" y=\"36\" width=\"52\" height=\"42\" fill=\"transparent\"/> {/* add this so its easier to click menu */}\n                        <path d=\"M54.1376 36H7.86239C6.28153 36 5 37.432 5 39.1984C5 40.9648 6.28153 42.3968 7.86239 42.3968H54.1376C55.7185 42.3968 57 40.9648 57 39.1984C57 37.432 55.7185 36 54.1376 36Z\" fill=\"#6153AE\"/>\n                        <path d=\"M54.1376 47.8677H22.1743C20.5934 47.8677 19.3119 49.2997 19.3119 51.0661C19.3119 52.8326 20.5934 54.2645 22.1743 54.2645H54.1376C55.7184 54.2645 57 52.8326 57 51.0661C57 49.2997 55.7184 47.8677 54.1376 47.8677Z\" fill=\"#6153AE\"/>\n                        <path d=\"M54.1376 59.7355H7.86239C6.28153 59.7355 5 61.1674 5 62.9339C5 64.7003 6.28153 66.1323 7.86239 66.1323H54.1376C55.7185 66.1323 57 64.7003 57 62.9339C57 61.1674 55.7185 59.7355 54.1376 59.7355Z\" fill=\"#6153AE\"/>\n                        <path d=\"M54.1376 71.6032H22.1743C20.5934 71.6032 19.3119 73.0352 19.3119 74.8016C19.3119 76.568 20.5934 78 22.1743 78H54.1376C55.7184 78 57 76.568 57 74.8016C57 73.0352 55.7184 71.6032 54.1376 71.6032Z\" fill=\"#6153AE\"/>\n                    </g>\n                </svg>\n\n                <Nav id=\"nav\" className=\"robin-nav y-scrollable\">\n                    <Nav.Link className=\"robin-nav-close robin-nav-link\" onClick={(e) => this.handleClose(e)} aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </Nav.Link>\n                    <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"home\" to=\"/\">home</Nav.Link>\n\n                    {this.state.loggedIn === \"true\" && \n                    <>\n                        <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"find_jobs\" to=\"/search\">find jobs</Nav.Link>\n                        <Nav.Link className=\"robin-nav-link\" as={Link} onClick={() => {sessionStorage.clear()}} eventKey=\"sign_out\" to=\"/\">sign out</Nav.Link>\n                    </>\n                    }\n\n                    {this.state.loggedIn !== \"true\" && \n                    <>\n                        <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"find_jobs\" to=\"/signup\">sign up</Nav.Link>\n                        <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"find_jobs\" to=\"/login\">login</Nav.Link>\n                    </>\n                    }\n                    <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"how_it_works\" to=\"/how-it-works\">how it works</Nav.Link>\n                    <Nav.Link className=\"robin-nav-link\" as={Link} eventKey=\"about_us\" to=\"/about-us\">about us</Nav.Link>\n                </Nav>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function Page(props) {\n    return (\n        <div className=\"signup-nav ml-auto\">\n            <Col>\n                <Row>\n                    <Link to=\"/signup\" className=\"signup-nav-link\"> Sign Up</Link>\n                    <p>|</p>\n                    <Link to=\"/login\" className=\"signup-nav-link\"> Login</Link>\n                </Row>\n            </Col>\n        </div>\n    );\n}","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport NavBar from '../NavBar/NavBar';\nimport SignupNav from '../Components/SignupNav';\n\nexport default function Header() {\n    return (\n        <Col>\n            <Row>\n                <NavBar/>\n                <SignupNav/>\n            </Row>\n        </Col>\n    );\n}","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport '../Home/Home.scss'\n\nexport default function Header(props) {\n    return (\n        <Col className=\"footer\">\n            <Row style={{justifyContent: \"center\"}}>\n                <Col md=\"2\">\n                    <h3>Contact Us</h3>\n                    <ul>\n                        <li>\n                            <Link className=\"footer-link\">Email</Link>\n                        </li>\n                        <li>\n                            <Link className=\"footer-link\">LinkedIn</Link>\n                        </li>\n                    </ul>\n                </Col>\n                <Col md=\"2\">\n                    <h3>Support</h3>\n                    <ul>\n                        <li>\n                            <Link className=\"footer-link\" to=\"/how-it-works\">FAQ</Link>\n                        </li>\n                    </ul>\n                </Col>\n                <Col md=\"2\">\n                    <h3>Company</h3>\n                    <ul>\n                        <li>\n                            <Link className=\"footer-link\" to=\"/about-us\">About Us</Link>\n                        </li>\n                        <li>\n                            <Link className=\"footer-link\" to=\"/how-it-works\">How It Works</Link>\n                        </li>\n                    </ul>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","export default __webpack_public_path__ + \"static/media/home_illustration.2b26d3fc.svg\";","import React from 'react';\nimport illustration from '../svgs/home_illustration.svg';\n\nexport default function Home_illustration(props) {\n    return(\n        <img src={illustration} style={{width: props.size}}/>\n    );\n}","import React from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n/* components */\nimport Page from '../Page/Page';\nimport Header from '../Components/Header';\nimport Footer from '../Components/Footer';\n\n/* svgs */\nimport Illustration from '../illustrations/Home_illustration';\n\nexport default class Home extends React.Component {\n    render() {\n        return(\n            <Page>\n                <Col>\n                    <Row>\n                        <Header/>\n                    </Row>\n                    <Row className=\"home-information\">\n                        <p className=\"home-message\">\n                            Find a job <br/>\n                            tailored to your skills <br/>\n                            and the perfect resume <br/>\n                            for that job\n                        </p>\n                        <Illustration size=\"27rem\" />\n                    </Row>\n                    <Row className=\"home-information mt-3\">\n                        <Button as={Link} to=\"/how-it-works\" variant=\"main-brand\" size=\"lg\" >How It Works</Button>\n                    </Row>\n                    <Row>\n                        <Footer/>\n                    </Row>\n                </Col>\n            </Page>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/login_illustration.a09fd531.svg\";","import React from 'react';\n\nimport illustration from '../svgs/login_illustration.svg';\n\nexport default function Logo(props) {\n    return(\n        <img src={illustration} style={{height: props.size, width: props.size}}/>\n    );\n}","export default __webpack_public_path__ + \"static/media/error_illustration.3a87c90d.svg\";","import React from 'react';\nimport illustration from '../svgs/error_illustration.svg';\n\nexport default function Error_illustration(props) {\n    return(\n        <img src={illustration} style={{height: props.size, width: props.size}}/>\n    );\n}","\nimport { CognitoUserPool } from 'amazon-cognito-identity-js';\n\nconst poolData = {\n  UserPoolId: 'us-west-2_7EFU4WgQ7',\n  ClientId: '2olq0j248jvuu3ja4jgk4gt75o'\n};\n\nexport default new CognitoUserPool(poolData);","import React from 'react';\nimport { Button, Row, Col, Form } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport axios from 'axios';\n\n/* styling */\nimport './Login.scss';\n\n/* components */\nimport Page from '../Page/Page';\nimport Header from '../Components/Header';\n\n/* svgs */\nimport Illustration from \"../illustrations/Login_illustration\";\nimport ErrorIllustration from \"../illustrations/Error_illustration\"\n\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport UserPool from '../UserPool';\n\nexport default class Login extends React.Component{\n    validationSchema = yup.object({\n        email: yup.string()\n            .email(\"Invalid email\")\n            .required(\"Required\"),\n        password: yup.string()\n            .required(\"Required\"),\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            logedIn: false,\n            wrongPassword:false,\n            notConfirmed:false,\n            onboarded: false,\n            checkedOnboarding: false\n        }\n    }\n\n    hasOnboarded() {\n        const params = {\n            email: sessionStorage.getItem('email')\n        };\n        console.log(sessionStorage.getItem('email'));\n\n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/fetch/contact`, {params})\n            .then(res => {\n                if(res.data?.email != undefined) {\n                    this.setState({ onboarded: true });\n                }\n                this.setState({ checkedOnboarding: true });\n            })\n    }\n    \n    handleSubmit(value) {\n      const user = new CognitoUser({\n        Username: value.email,\n        Pool: UserPool\n    });\n\n    const authDetails = new AuthenticationDetails({\n        Username: value.email,\n        Password: value.password\n    });\n\n    user.authenticateUser(authDetails, {\n        onSuccess: data => {\n            sessionStorage.setItem('email', value.email);\n            sessionStorage.setItem('loggedIn', \"true\");\n            this.setState({logedIn:true});\n            this.hasOnboarded();\n        },\n\n        onFailure: err => {\n        console.error(\"onFailure:\", err);\n        if(err.name == \"UserNotConfirmedException\"){\n            console.error(err)\n            this.setState({notConfirmed:true})\n        }else{\n            this.setState({wrongPassword:true});\n        }\n        \n        },\n\n        newPasswordRequired: data => {\n        console.log(\"newPasswordRequired:\", data);\n        }\n    });\n    }\n    render(){\n        \n        if(this.state.notConfirmed === true){\n            return <Redirect to='/verify-email'></Redirect>\n        }\n        if(this.state.checkedOnboarding === true && this.state.logedIn === true && this.state.onboarded === false){\n            return <Redirect to='/onboarding/general' />\n        }\n        if(this.state.checkedOnboarding === true && this.state.logedIn === true && this.state.onboarded === true){\n            return <Redirect to='/search' />\n        }\n        return (\n            <div className=\"login-page\">\n                <Page>\n                    <Col>\n                        <Row>\n                            <Header/>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {this.state.wrongPassword !== true && <Illustration size = \"28rem\"/>}\n                                {this.state.wrongPassword === true && <ErrorIllustration size = \"28rem\"/>}\n                            </Col>\n                            <Col className=\"login-form\">\n                                <Formik\n                                    initialValues={{\n                                        email: '',\n                                        password: ''\n                                    }}\n                                    validationSchema={this.validationSchema}\n                                onSubmit={(values) => (this.handleSubmit(values))}\n                                >\n                                    {({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit\n                                    }) => (\n                                    <Form onSubmit={handleSubmit} >\n                                        <h1 className=\"form-header\">Login</h1>\n                                        { this.state.wrongPassword &&\n                                        <div className=\"form-error\">\n                                            <p>The username and password you entered did not match our records. Double-check and try again.</p>\n                                        </div>\n                                        }\n                                        <Form.Group controlId=\"email\">\n                                            <Form.Label className=\"form-label\">Email</Form.Label>\n                                            <Form.Control\n                                            className=\"form-input\"\n                                            type=\"email\"\n                                            name=\"email\"\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.email && !errors.email}\n                                            isInvalid={touched.email && errors.email}\n                                            />\n                                            <Form.Text className=\"form-error-text\">{touched.email && errors.email}</Form.Text>\n                                        </Form.Group>\n                                        <Form.Group controlId=\"password\">\n                                            <Form.Label className=\"form-label\">Password</Form.Label>\n                                            <Form.Control\n                                            className=\"form-input\"\n                                            type=\"password\"\n                                            name=\"password\"\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            value={values.password}\n                                            isInvalid={touched.password && errors.password}\n                                            />\n                                            <Form.Text className=\"form-error-text\">{touched.password && errors.password}</Form.Text>\n                                        </Form.Group>\n                                        <div className=\"form-footer\">\n                                            <span>I don't have an account yet - <Link to=\"/signup\" className=\"form-link\"> Sign Up</Link></span>\n                                            <Button variant=\"dark-shade\" className=\"form-submit ml-auto\" type=\"submit\" id=\"submit\">Next</Button>\n                                        </div>\n                                        </Form>\n                                    )}\n                                </Formik>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Page>\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport './Search.scss';\n\nimport NavBar from '../NavBar/NavBar';\nimport Login from '../Login/Login';\nimport Page from '../Page/Page';\nimport axios from 'axios';\n\nexport default class Search extends React.Component {\n    validationSchema = yup.object({\n        url: yup.string()\n            .required(\"Required\")\n            .url(\"Invalid URL\")\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            search: false,\n            url:\"\",\n            loggedIn : sessionStorage.getItem('loggedIn')\n        }\n       \n    }\n\n    handleSubmit(value) {\n        this.setState({ \n            search:true,\n            url:value.url\n        });\n    }\n\n    render() {\n        if(this.state.loggedIn === \"true\"){\n            if(this.state.search === true){\n                return <Redirect to={`/results/${this.state.url.replaceAll('/', '%2F')}`} />\n            }\n            return(\n                <Page>\n                    <NavBar/>\n                    <div className=\"search-card\">\n                        <Formik\n                            initialValues={{\n                                url: ''\n                            }}\n                            validationSchema={this.validationSchema}\n                            onSubmit={(values) => (this.handleSubmit(values))}\n                            >\n                            {({\n                                handleSubmit,\n                                handleChange,\n                                handleBlur,\n                                values,\n                                touched,\n                                errors,\n                            }) => (\n                                <Form className=\"search-form\" onSubmit={handleSubmit}>\n                                    <div className=\"form-header\">\n                                        <h1 className=\"form-title\">Search for Jobs by URL</h1>\n                                    </div>\n                                    <Form.Group controlId=\"url\">\n                                        <Form.Label className=\"form-label\">LinkedIn URL</Form.Label>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"URL\"\n                                            value={values.url}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.url && !errors.url}\n                                            isInvalid={touched.url && errors.url}\n                                        />\n                                        <Form.Text className=\"form-error-text\">{touched.url && errors.url}</Form.Text>\n                                    </Form.Group>\n                                    <div className=\"form-footer\">\n                                        <Button variant=\"light-accent\" className=\"text-white ml-auto\" type=\"submit\">Search</Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    </div>\n                </Page>\n            );\n        } else {\n            return(<Login></Login>)\n        }\n    }\n}\n","export default __webpack_public_path__ + \"static/media/robin_logo.12215606.svg\";","export default __webpack_public_path__ + \"static/media/checklist_illustration.1bbec0e8.svg\";","import React from 'react';\n\nimport illustration from '../svgs/checklist_illustration.svg';\n\nexport default function Checklist(props) {\n    return(\n        <img src={illustration} style={{height: props.size, width: props.size}}/>\n    );\n}","import React,{useState} from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport UserPool from '../UserPool';\n\n/* styling */\nimport './SignUp.scss';\n\n/* components */\nimport Page from '../Page/Page';\nimport Logo from \"../illustrations/Logo\"\nimport Header from '../Components/Header';\n\n/* svgs */\nimport Checklist from '../illustrations/Checklist';\n\n\nexport default class SignUp extends React.Component {\n    validationSchema = yup.object({\n        name: yup.string()\n            .required(\"Required\"),\n        email: yup.string()\n            .email(\"Invalid email\")\n            .required(\"Required\"),\n        password: yup.string()\n            .required(\"Required\")\n            .matches(\n                /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n                \"Your password must contain 8 characters, at least one:\\n uppercase,\\n lowercase, \\n  number and \\n special case character\"\n              ),\n        confirm_password: yup.string()\n            .required(\"Required\")\n            .oneOf(\n                [yup.ref('password'), null],\n                \"Passwords must match\"\n            ).matches(\n                /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n                \"Your password must contain 8 characters, at least one:\\n uppercase,\\n lowercase, \\n  number and \\n special case character\"\n            )\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            signedUp: false,\n            alreadyExists:false\n        }\n\n    }\n    handleSubmit(value) {\n      UserPool.signUp(value.email, value.password, [], null, (err, data) => {\n            if (err) {\n                if(err.name == \"UsernameExistsException\"){\n                    this.setState({alreadyExists:true})\n                }\n            } else {\n                this.setState({signedUp:true});\n            }\n        });\n    }  \n    \n    render() {\n        if(this.state.signedUp === true){\n            return <Redirect to='/verify-email'></Redirect>\n        }\n\n        return (\n        <Page>\n            <Col>\n                <Row>\n                    <Col>\n                        <Header/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div className=\"signup-illustration\">\n                            <Checklist  size=\"25rem\"/>\n                        </div>\n                    </Col>\n                    <Col>\n                        <Formik\n                            initialValues={{\n                                name: '',\n                                email: '',\n                                password: '',\n                                confirm_password: ''\n                            }}\n                            validationSchema={this.validationSchema}\n                            onSubmit={(values) => (this.handleSubmit(values))}\n                        >\n                            {({\n                                handleSubmit,\n                                handleChange,\n                                handleBlur,\n                                values,\n                                touched,\n                                errors,\n                            }) => (\n                                <Form className=\"form-signup\" onSubmit={handleSubmit}>\n                                    <h1 className=\"form-header text-center\">Sign Up</h1>\n                                    { this.state.alreadyExists &&\n                                    <div className=\"form-error\">\n                                        <p>The username you entered is already being used. <br/> Please <Link to=\"/login\" className=\"form-link text-white\">Login</Link></p>\n                                    </div>\n                                    }\n                                    <Form.Group controlId=\"name\">\n                                        <Form.Label className=\"form-label\">Name</Form.Label>\n                                        <Form.Control\n                                            className=\"form-input\"\n                                            type=\"text\"\n                                            value={values.name}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.name && !errors.name}\n                                            isInvalid={touched.name && errors.name}\n                                        />\n                                        <Form.Text className=\"form-error-text\">{touched.name && errors.name}</Form.Text>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"email\">\n                                        <Form.Label className=\"form-label\">Email</Form.Label>\n                                        <Form.Control\n                                            className=\"form-input\"\n                                            type=\"email\"\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.email && !errors.email}\n                                            isInvalid={touched.email && errors.email}\n                                        />\n                                        <Form.Text className=\"form-error-text\">{touched.email && errors.email}</Form.Text>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"password\">\n                                        <Form.Label className=\"form-label\">Password</Form.Label>\n                                        <Form.Control\n                                            className=\"form-input\"\n                                            type=\"password\"\n                                            value={values.password}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.password && !errors.password}\n                                            isInvalid={touched.password && errors.password}\n                                        />\n                                        <Form.Text className=\"form-error-text\">{touched.password && errors.password}</Form.Text>\n                                    </Form.Group>\n                                    <Form.Group controlId=\"confirm_password\">\n                                        <Form.Label className=\"form-label\">Confirm Password</Form.Label>\n                                        <Form.Control\n                                            className=\"form-input\"\n                                            type=\"password\"\n                                            value={values.confirm_password}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur}\n                                            isValid={touched.confirm_password && !errors.confirm_password}\n                                            isInvalid={touched.confirm_password && errors.confirm_password}\n                                        />\n                                        <Form.Text className=\"form-error-text\">{touched.confirm_password && errors.confirm_password}</Form.Text>\n                                    </Form.Group>\n                                    <div className=\"form-footer\">\n                                        <span className=\"text-white\">I already have an account - <Link to=\"/login\" className=\"text-main-brand\">Login</Link></span>\n                                        <Button variant=\"dark-shade\" className=\"form-submit ml-auto\" type=\"submit\" id=\"submit\">Next</Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    </Col>\n                </Row>\n            </Col>\n        </Page>\n        );\n    }\n}\n","export default function DateToDBDate(date) {\n    //Input format: YYYY-MM-DD\n    //DB format: MM-YYYY\n    var month, day, year;\n    if(date.length == 10) {\n        month = date.substring(5,7);\n        day = date.substring(8);\n        year = date.substring(0, 4);\n    }\n\n    return date.length == 10 ? `${month}-${year}` : '';\n}","import React from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport '../Onboarding.scss';\nimport axios from 'axios';\n\nimport DateToDBDate from '../Util';\n\nlet avg_chars_per_word = 6;\nlet max_words = 13;\nexport default class ProjectInputOnboarding extends React.Component {\n    validationSchema = yup.object({\n        name: yup.string()\n            .required(\"Required\"),\n        start_date: yup.date()\n            .required(\"Required\"),\n        end_date: yup.date()\n            .min(yup.ref('start_date'), \"Date must be later than start date\")\n            .required(\"Required\"),\n        about: yup.string()\n            .required(\"Required\")\n            .max(max_words * avg_chars_per_word)\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            informationPosted: false\n        };\n    }\n\n    handleSubmit(values) {\n        const position ={\n            email: sessionStorage.getItem('email'),\n            name: values.name,\n            position: values.position,\n            start_date: DateToDBDate(values.start_date),\n            end_date: DateToDBDate(values.end_date),\n            about: values.about        \n        }\n        axios.post('http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/onboard/project',{position})\n            .then(res => {\n                console.log('in project input onboarding');\n                console.log(res.data);\n                // this.setState({informationPosted: true});\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/projects'/>\n        }\n        return(\n            <Formik\n                initialValues={{\n                    name: '',\n                    start_date: '',\n                    end_date: '',\n                    about: ''\n                }}\n                validationSchema={this.validationSchema}\n                onSubmit={(values) => (this.handleSubmit(values))}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    touched,\n                    errors,\n                }) => (\n                    <Form className=\"onboarding-form\" onSubmit={handleSubmit}>\n                        <h1 className=\"form-title\">Project</h1>\n                        <Form.Group controlId=\"name\">\n                            <Form.Label className=\"form-label\">Name</Form.Label>\n                            <Form.Control\n                                className=\"form-input\"\n                                type=\"text\"\n                                value={values.name}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                isValid={touched.name && !errors.name}\n                                isInvalid={touched.name && errors.name}\n                            />\n                            <Form.Text className=\"form-error-text\">{touched.name && errors.name}</Form.Text>\n                        </Form.Group>\n                        <Form.Row>\n                            <Col>\n                                <Form.Group controlId=\"start_date\">\n                                    <Form.Label className=\"form-label\">Start Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.start_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.start_date && !errors.start_date}\n                                        isInvalid={touched.start_date && errors.start_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.start_date && errors.start_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"end_date\">\n                                    <Form.Label className=\"form-label\">Finish Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.end_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.end_date && !errors.end_date}\n                                        isInvalid={touched.end_date && errors.end_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.end_date && errors.end_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n                        <Form.Group controlId=\"about\">\n                            <Form.Label className=\"form-label\">About</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                className=\"form-input\"\n                                value={values.about}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                isValid={touched.about && !errors.about}\n                                isInvalid={touched.about && errors.about}\n                            />\n                            <Form.Text className=\"form-error-text\">{touched.about && errors.about}</Form.Text>\n                        </Form.Group>\n                        <div className=\"form-footer\">\n                            <Button variant=\"light-accent\" className=\"text-white ml-auto\" type=\"submit\">Save</Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n}","import React from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function ProjectCard(props) {\n    return ( \n        <Card className=\"onboarding-card\">\n            <Row>\n                <Col md={10}>\n                    <Card.Body>\n                        <Card.Title><span className=\"text-light-accent\">{props.name}</span></Card.Title>\n                        <Card.Subtitle>{props.start_date} to {props.end_date}</Card.Subtitle>\n                        <Card.Body>{props.about}</Card.Body>\n                    </Card.Body>\n                </Col>\n                {/* <Col className=\"card-btns\">\n                    <Button as={Link} to={`/onboarding/projects/edit/${props.id}`} className=\"mb-2\" variant=\"light-shade\">Edit</Button>\n                    <Button variant=\"danger\">Delete</Button>\n                </Col> */}\n            </Row>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Button, Card, Row } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport '../Onboarding.scss';\nimport axios from 'axios'\n\nimport Logo from \"../../illustrations/Logo\";\nimport ProjectCard from './ProjectCard';\nexport default class ProjectsOnboarding extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            projects: [\n                // {\n                //     title: 'Robin',\n                //     start_date: 'January 2020',\n                //     end_date: 'May 2021',\n                //     description: 'Resume Builder'\n                // },\n            ],\n        };\n    }\n    componentDidMount() {\n        const params = {\n            email: sessionStorage.getItem('email')\n        };\n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/fetch/projects`, {params})\n          .then(res => {\n            const projects = res.data;\n            this.setState({ projects });\n          })\n      }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onUserDataUpdate(null, \"projects\");\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        console.log(this.state.projects.data)\n        if(this.state.informationPosted){\n            return <Redirect to='/search'/>\n        }\n        return (\n            <div>\n                <Row className=\"onboarding-form\">\n                    <h1 className=\"form-title\">Projects</h1>\n                </Row>\n                <Row className=\"onboarding-card-display\">\n                    {this.state.projects.length !== 0 && this.state.projects.data.map(project => {\n                        return (\n                        <ProjectCard \n                            name={project.title}\n                            start_date={project.start_date}\n                            end_date={project.end_date}\n                            about={project.description}\n                        />\n                        );\n                    })}\n                    {/* Add icon*/}\n                    <Card className=\"onboarding-card\">\n                        <div className=\"py-2 px-2\" style={{display: \"flex\"}}>\n                            <Button\n                                as={Link}\n                                to=\"/onboarding/projects/create\"\n                                variant=\"light-shade\" \n                                className=\"ml-auto\"\n                            >\n                                Add\n                            </Button>\n                        </div>\n                    </Card>\n                </Row>\n                <Row>\n                    <Button \n                        className=\"text-white ml-auto\" \n                        variant=\"light-accent\"\n                        onClick={(e) => this.handleSubmit(e)}\n                    >\n                        Next\n                    </Button>\n                </Row>      \n            </div>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { Badge } from 'react-bootstrap';\n\nimport './Pill.scss';\n\nexport default function Pill(props) {\n    const [visible, setVisible] = useState(true);\n\n    function handleClick(e) {\n        e.preventDefault();\n        setVisible(false);\n        removeSkill()\n        \n    }\n    function removeSkill(e) {\n        var index = props.array.indexOf(props.name)\n        if(index !== -1){\n            props.array.splice(index,1);\n        }\n        \n    }\n\n    return visible && (\n        <Badge pill variant={props.variant} className=\"text-white pill\">\n            {props.name}\n            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={handleClick}>\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n        </Badge>\n    );\n}","import React from 'react';\nimport { Button, Form, Row } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport '../Onboarding.scss';\nimport axios from 'axios';\n\nimport Pill from '../../Pill/Pill';\n\n\nexport default class SkillsOnboarding extends React.Component {   \n    constructor(props) {\n        super(props);\n        this.state = {\n            // skills_input: '',\n            current_skill: '',\n            skills_array: [],\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n    componentDidMount() {\n        const params = {\n            email: sessionStorage.getItem('email')\n        };\n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/fetch/skills`, {params})\n          .then(res => {\n            const skills_array = res.data\n            console.log(skills_array)\n            // const skills_array = res.data;\n            // skills_array = skills_array.split(\",\").trim()\n            // this.setState({ skills_array });\n          })\n      }\n    handleClick(e){\n        e.preventDefault();\n        const skills = this.state.skills_array.join(\",\");\n        const data = {\n            email: sessionStorage.getItem('email'),\n            skills: skills,\n        }\n         axios.post('http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/onboard/skills',{data})\n         .then(res => {\n            console.log('Printing skills request data')\n            console.log(res.data);\n            \n        })\n        .catch(err => {\n            console.log(err);\n        });\n        this.props.onUserDataUpdate(null, \"skills\");\n        this.setState({informationPosted:true});\n    }\n    handleKeypress(e) {\n        \n        //it triggers by pressing the enter key\n      if (e.keyCode === 13) {\n        this.handleSubmit(e);\n      }\n    };\n\n    handleSubmit(e) {\n        e.preventDefault();\n        var new_skills = this.state.skills_array.concat(this.state.current_skill.trim());\n        this.setState({skills_array: new_skills});\n    }\n\n    handleChange(e) {\n        e.preventDefault();\n        this.setState({current_skill: e.target.value});\n        \n    }\n\n    render() {\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/projects'/>\n        }\n        return (\n            <div>\n                <Row className=\"onboarding-form\">\n                    <h1 className=\"form-title\">Skills</h1>\n                </Row>\n                <div className=\"results-container\">\n                    {this.state.skills_array.map((skill,index)=>{\n                            return (\n                            <Pill name = {skill}  variant=\"main-brand\" array={this.state.skills_array}> </Pill>\n                            );\n                        })}\n                </div>\n                \n                <Form className=\"onboarding-form\" onSubmit={(e) => this.handleSubmit(e)} >\n                    <Form.Group controlId=\"skills_input\" style={{marginTop:\"2rem\",height:\"70%\", }}>\n                        <Form.Text className=\"text-muted\">Add you skill by clicking add or pressing enter</Form.Text>\n                        <Form.Control\n                            type=\"text\"\n                            className=\"onboarding-form-input\"\n                            value={this.state.skills_input}\n                            onChange={(e) => this.handleChange(e)}\n                            onKeyPress={this.handleKeypress}\n                            \n                        />\n                    </Form.Group> \n                    <div className=\"form-footer\">\n                        <Button type=\"submit\" variant=\"dark-accent\" className=\"text-white\">\n                            Add\n                        </Button>\n                        <Button \n                            onClick={this.handleClick}\n                            variant=\"light-accent\" \n                            className=\"text-white ml-auto\"\n                        >\n                            Next\n                        </Button>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Button, Col, Form, Row } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport '../Onboarding.scss';\nimport axios from 'axios';\n\nimport DateToDBDate from '../Util';\n\nlet avg_chars_per_word = 6;\nlet max_words = 13;\nexport default class EducationInputOnboarding extends React.Component {\n    validationSchema = yup.object({\n        company: yup.string()\n            .required(\"Required\"),\n        position: yup.string()\n            .required(\"Required\"),\n        city: yup.string()\n            .required(\"Required\"),\n        start_date: yup.date()\n            .required(\"Required\"),\n        end_date: yup.date()\n            .min(yup.ref('start_date'), \"Date must be later than start date\"),\n        rel_achievements: yup.string()\n            .max(max_words * avg_chars_per_word)\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            informationPosted: false\n        }\n    }\n\n    handleSubmit(values) {\n        const position ={\n            email: sessionStorage.getItem('email'),\n            company: values.company,\n            position: values.position,\n            start_date: DateToDBDate(values.start_date),\n            end_date: DateToDBDate(values.end_date),\n            relevant_achievements: values.rel_achievements     \n        }\n        axios.post('http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/onboard/experience',{position})\n            .then(res => {\n                console.log(res.data);\n                //this.setState({informationPosted: true});\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/experience'/>\n        }\n        return(\n            <Formik\n                initialValues={{\n                    company: '',\n                    position: '',\n                    city: '',\n                    start_date: '',\n                    end_date: '',\n                    rel_achievements: ''\n                }}\n                validationSchema={this.validationSchema}\n                onSubmit={(values) => (this.handleSubmit(values))}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    touched,\n                    errors,\n                }) => (\n                    <Form className=\"onboarding-form\" onSubmit={handleSubmit}>\n                        <h1 className=\"form-title\">Professional History</h1>\n                        <Form.Group controlId=\"company\">\n                            <Form.Label className=\"form-label\">Company</Form.Label>\n                            <Form.Control\n                                className=\"form-input\"\n                                type=\"text\"\n                                value={values.company}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                isValid={touched.company && !errors.company}\n                                isInvalid={touched.company && errors.company}\n                            />\n                            <Form.Text className=\"form-error-text\">{touched.company && errors.company}</Form.Text>\n                        </Form.Group>\n                        <Form.Row>\n                            <Col>\n                                <Form.Group controlId=\"position\">\n                                    <Form.Label className=\"form-label\">Position</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.position}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.position && !errors.position}\n                                        isInvalid={touched.position && errors.position}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.position && errors.position}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"city\">\n                                    <Form.Label className=\"form-label\">City</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.city}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.city && !errors.city}\n                                        isInvalid={touched.city && errors.city}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.city && errors.city}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col>\n                                <Form.Group controlId=\"start_date\">\n                                    <Form.Label className=\"form-label\">Start Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.start_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.start_date && !errors.start_date}\n                                        isInvalid={touched.start_date && errors.start_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.start_date && errors.start_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"end_date\">\n                                    <Form.Label className=\"form-label\">End Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.end_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.end_date && !errors.end_date}\n                                        isInvalid={touched.end_date && errors.end_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.end_date && errors.end_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n                        <Form.Group controlId=\"rel_achievements\">\n                            <Form.Label className=\"form-label\">Relevant Achievements</Form.Label>\n                            <Form.Control\n                                as=\"textarea\"\n                                className=\"form-input\"\n                                value={values.rel_achievements}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                isValid={touched.rel_achievements && !errors.rel_achievements}\n                                isInvalid={touched.rel_achievements && errors.rel_achievements}\n                            />\n                            <Form.Text className=\"form-error-text\">{touched.rel_achievements && errors.rel_achievements}</Form.Text>\n                        </Form.Group>\n                        <div className=\"form-footer\">\n                            <Button variant=\"light-accent text-white\" className=\"ml-auto\" type=\"submit\">Save</Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n}","import React from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function JobCard(props) {\n    return ( \n        <Card className=\"onboarding-card\">\n            <Row>\n                <Col md={10}>\n                    <Card.Body>\n                        <Card.Title><span className=\"text-light-accent\">{props.position}</span> at {props.company}</Card.Title>\n                        <Card.Subtitle>{props.city} - {props.start_date} to {props.end_date}</Card.Subtitle>\n                        <Card.Body>{props.rel_achievements}</Card.Body>\n                    </Card.Body>\n                </Col>\n                {/* <Col className=\"card-btns\">\n                <Button as={Link} to={`/onboarding/experience/edit/${props.id}`} className=\"mb-2\" variant=\"light-shade\">\n                        Edit\n                    </Button>\n                    <Button variant=\"danger\">\n                        Delete\n                    </Button>\n                </Col> */}\n            </Row>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Button, Card, Row } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport '../Onboarding.scss';\nimport axios from 'axios'\nimport Logo from \"../../illustrations/Logo\";\nimport JobCard from './JobCard';\n\nexport default class EducationOnboarding extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobs: [\n                // {\n                //     company: 'Google',\n                //     title: 'Software Engineer',\n                //     city: 'San Francisco',\n                //     start_date: 'Jan 2020',\n                //     end_date: 'Present',\n                //     rel_achievements: ''\n                // },\n            ],\n            informationPosted: false\n        };\n    }\n    componentDidMount() {\n        const params = {\n            email: sessionStorage.getItem('email')\n        };\n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/fetch/experience`, {params})\n          .then(res => {\n            const jobs = res.data;\n            this.setState({ jobs });\n          })\n      }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onUserDataUpdate(null, \"experience\");\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        console.log(this.state.jobs)\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/skills'/>\n        }\n        return (\n            <div>\n                <Row className=\"onboarding-form\">\n                    <h1 className=\"form-title\">Professional History</h1>\n                </Row>\n                <Row className=\"onboarding-card-display\">\n                    {this.state.jobs.length !== 0 && this.state.jobs.data.map(job => {\n                        return (\n                        <JobCard \n                            company={job.company}\n                            position={job.title}\n                            city={job.city}\n                            start_date={job.start_date}\n                            end_date={job.end_date}\n                            rel_achievements={job.rel_achievements}\n                        />\n                        );\n                    })}\n                    {/* Add icon*/}\n                    <Card className=\"onboarding-card\">\n                        <div className=\"py-2 px-2\" style={{display: \"flex\"}}>\n                            <Button\n                                as={Link}\n                                to=\"/onboarding/experience/create\"\n                                variant=\"light-shade\" \n                                className=\"ml-auto\"\n                            >\n                                Add\n                            </Button>\n                        </div>\n                    </Card>\n                </Row>\n                <Row>\n                    <Button \n                        className=\"text-white ml-auto\" \n                        variant=\"light-accent\"\n                        onClick={(e) => this.handleSubmit(e)}\n                    >\n                        Next\n                    </Button>\n                </Row>\n            </div>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Col, Form } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport '../Onboarding.scss';\n\nimport axios from 'axios';\nimport DateToDBDate from '../Util';\n\nlet avg_chars_per_word = 6;\nlet max_words = 13;\nexport default class EducationInputOnboarding extends React.Component {\n    validationSchema = yup.object({\n        school: yup.string()\n            .required(\"Required\"),\n        city: yup.string()\n            .required(\"Required\"),\n        degree: yup.string()\n            .required(\"Required\"),\n        field_of_study: yup.string()\n            .required(\"Required\"),\n        start_date: yup.date()\n            .required(\"Required\"),\n        graduation_date: yup.date()\n            .min(yup.ref('start_date'), \"Date must be later than start date\")\n            .required(\"Required\"),\n        gpa: yup.number()\n            .moreThan(0.9 ,\"GPA must be higher to equal to 1.0\")\n            .lessThan(5.1, \"GPA must be lower or equal to 5.0\")\n            .required(\"Required\"),\n        honors: yup.string()\n            .max(max_words * avg_chars_per_word),\n        rel_course_work: yup.string()\n            .max(max_words * avg_chars_per_word),\n        activities: yup.string()\n            .max(max_words * avg_chars_per_word)\n    });\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            informationPosted: false\n        };\n    }\n\n    handleSubmit(values) {\n        const degree = {\n            email: sessionStorage.getItem('email'),\n            school: values.school,\n            city: values.city,\n            degree: values.degree, \n            field_of_study: values.field_of_study,\n            start_date: DateToDBDate(values.start_date),\n            graduation_date: DateToDBDate(values.graduation_date),\n            gpa: values.gpa,\n            honors: values.honors,\n            coursework: values.rel_course_work, \n            activities: values.activities\n        }\n        \n        axios.post('http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/onboard/education',{degree})\n            .then(res => {\n                console.log(res.data);\n                this.setState({informationPosted: true});\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/education'/>\n        }\n        return(\n            <Formik\n                initialValues={{\n                    school: '',\n                    city: '',\n                    degree: '',\n                    field_of_study: '',\n                    start_date: '',\n                    graduation_date: '',\n                    gpa: '',\n                    honors: '',\n                    rel_course_work: '',\n                    activities: ''\n                }}\n                validationSchema={this.validationSchema}\n                onSubmit={(values) => (this.handleSubmit(values))}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    values,\n                    touched,\n                    errors\n                }) => (\n                    <Form className=\"onboarding-form\" onSubmit={handleSubmit}>\n                        <h1 className=\"form-title\">Degree</h1>\n                        <Form.Row>\n                            <Form.Group as={Col} controlId=\"school\">\n                                <Form.Label className=\"form-label\">School</Form.Label>\n                                <Form.Control\n                                    className=\"form-input\"\n                                    type=\"text\"\n                                    value={values.school}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.school && !errors.school}\n                                    isInvalid={touched.school && errors.school}\n                                />\n                                <Form.Text className=\"form-error-text\">{touched.school && errors.school}</Form.Text>\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"city\">\n                                <Form.Label className=\"form-label\">City</Form.Label>\n                                <Form.Control\n                                    className=\"form-input\"\n                                    type=\"text\"\n                                    value={values.city}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    isValid={touched.city && !errors.city}\n                                    isInvalid={touched.city && errors.city}\n                                />\n                                <Form.Text className=\"form-error-text\">{touched.city && errors.city}</Form.Text>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col>\n                                <Form.Group controlId=\"degree\">\n                                    <Form.Label className=\"form-label\">Degree</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.degree}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.degree && !errors.degree}\n                                        isInvalid={touched.degree && errors.degree}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.degree && errors.degree}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"field_of_study\">\n                                    <Form.Label className=\"form-label\">Field of Study</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.field_of_study}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.field_of_study && !errors.field_of_study}\n                                        isInvalid={touched.field_of_study && errors.field_of_study}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.field_of_study && errors.field_of_study}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n                        <Form.Row>\n                            <Col>\n                                <Form.Group controlId=\"start_date\">\n                                    <Form.Label className=\"form-label\">Start Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.start_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.start_date && !errors.start_date}\n                                        isInvalid={touched.start_date && errors.start_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.start_date && errors.start_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"graduation_date\">\n                                    <Form.Label className=\"form-label\">Graduation Date</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"date\"\n                                        value={values.graduation_date}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.graduation_date && !errors.graduation_date}\n                                        isInvalid={touched.graduation_date && errors.graduation_date}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.graduation_date && errors.graduation_date}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"gpa\">\n                                    <Form.Label className=\"form-label\">GPA</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"numbers\"\n                                        value={values.gpa}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.gpa && !errors.gpa}\n                                        isInvalid={touched.gpa && errors.gpa}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.gpa && errors.gpa}</Form.Text>\n                                </Form.Group>\n                            </Col>\n                        </Form.Row>\n                        <Accordion>\n                            <Card>\n                                <Card.Header>\n                                    <Accordion.Toggle as={Button} className=\"ml-auto\" variant=\"dark-shade\" eventKey=\"0\">Extras</Accordion.Toggle>\n                                </Card.Header>\n                                <Accordion.Collapse eventKey=\"0\">\n                                    <Card.Body>\n                                        <Form.Group controlId=\"honors\">\n                                            <Form.Label className=\"form-label\">Honors</Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                className=\"form-input\"\n                                                value={values.honors}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                isValid={touched.honors && !errors.honors}\n                                                isInvalid={touched.honors && errors.honors}\n                                            />\n                                            <Form.Text className=\"form-error-text\">{touched.honors && errors.honors}</Form.Text>\n                                        </Form.Group>\n                                        <Form.Group controlId=\"rel_course_work\">\n                                            <Form.Label className=\"form-label\">Relevant Course Work</Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                className=\"form-input\"\n                                                value={values.rel_course_work}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                isValid={touched.rel_course_work && !errors.rel_course_work}\n                                                isInvalid={touched.rel_course_work && errors.rel_course_work}\n                                            />\n                                            <Form.Text className=\"form-error-text\">{touched.rel_course_work && errors.rel_course_work}</Form.Text>\n                                        </Form.Group>\n                                        <Form.Group controlId=\"activities\">\n                                            <Form.Label className=\"form-label\">Activities</Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                className=\"form-input\"\n                                                value={values.activities}\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                isValid={touched.activities && !errors.activities}\n                                                isInvalid={touched.activities && errors.activities}\n                                            />\n                                            <Form.Text className=\"form-error-text\">{touched.activities && errors.activities}</Form.Text>\n                                        </Form.Group>\n                                    </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                        </Accordion>\n                        <div className=\"form-footer\">\n                            <Button variant=\"light-accent text-white\" className=\"ml-auto\" type=\"submit\">Save</Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        );\n    }\n}","import React from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function EducationCard(props) {\n    return (\n        <Card className=\"onboarding-card\">\n            <Row>\n                <Col md={10}>\n                    <Card.Body>\n                        <Card.Title>{props.degree} in <span className=\"text-light-accent\">{props.field_of_study}</span></Card.Title>\n                        <Card.Subtitle>{props.school} - {props.start_date} to {props.graduation_date}</Card.Subtitle>\n                        <Card.Subtitle className=\"mt-2\">GPA: {props.gpa}</Card.Subtitle>\n                    </Card.Body>\n                </Col>\n                {/* <Col className=\"card-btns\">\n                    <Button as={Link} to={`/onboarding/education/edit/${props.id}`} className=\"mb-2\" variant=\"light-shade\">Edit</Button>\n                    <Button variant=\"danger\">Delete</Button>\n                </Col> */}\n            </Row>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Button, Card, Row } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport '../Onboarding.scss';\nimport axios from 'axios'\nimport Logo from \"../../illustrations/Logo\";\nimport EducationCard from './EducationCard';\n\nexport default class EducationOnboarding extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            educations: [],\n            informationPosted: false\n        };\n    }\n    componentDidMount() {\n        const params = {\n            email: sessionStorage.getItem('email')\n        };\n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/fetch/education`, {params})\n            .then(res => {\n                const educations = res.data;\n                this.setState({ educations });\n            })\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onUserDataUpdate(null, \"education\");\n        this.setState({informationPosted: true});\n    }\n\n    render() {\n        console.log(this.state.educations)\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/experience'/>\n        } \n        return (\n            <div>\n                <Row className=\"onboarding-form\">\n                    <h1 className=\"form-title\">Degrees</h1>\n                </Row>\n                <Row className=\"onboarding-card-display\">\n                \n                    {this.state.educations.length !== 0 && this.state.educations.data.map((edu, index) => {\n                        return (\n                        <EducationCard\n                            key={index}\n                            degree={edu.degree}\n                            field_of_study={edu.major}\n                            school={edu.school}\n                            gpa={edu.gpa}\n                            start_date={edu.start_date}\n                            graduation_date={edu.end_date}\n                        />\n                        );\n                    })}\n                    {/* Add icon*/}\n                    <Card className=\"onboarding-card\">\n                        <div className=\"py-2 px-2\" style={{display: \"flex\"}}>\n                            <Button\n                                as={Link}\n                                to=\"/onboarding/education/create\"\n                                variant=\"light-shade\" \n                                className=\"ml-auto\"\n                            >\n                                Add\n                            </Button>\n                        </div>\n                    </Card>\n                </Row>\n                <Row>\n                    <Button\n                        className=\"text-white ml-auto\" \n                        variant=\"light-accent\"\n                        onClick={(e) => this.handleSubmit(e)}\n                    >\n                        Next\n                    </Button>\n                </Row>\n            </div>   \n        );\n    }\n}","import React from 'react';\nimport { Button, Col, Form, Row, InputGroup,FormControl } from 'react-bootstrap';\nimport { Redirect, Route } from 'react-router-dom'\nimport axios from 'axios';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport '../Onboarding.scss';\n\nexport default class GeneralOnboarding extends React.Component {\n    validationSchema = yup.object({\n        name: yup.string()\n            .required(\"Required\"),\n        email: yup.string()\n            .email(\"Invalid email\")\n            .required(\"Required\"),\n        phone: yup.string().matches(/^((\\+[1-9]{1,4}[ -]?)|(\\([0-9]{2,3}\\)[ -]?)|([0-9]{2,4})[ -]?)*?[0-9]{3,4}[ -]?[0-9]{3,4}$/, 'Phone number is not valid')\n            .required(\"Required\")\n            .min(10),\n        website: yup.string()\n            .url(\"Invalid url\"),\n        linkedin: yup.string().required(\"Required\"),\n        github: yup.string().required(\"Required\"),\n    });\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            informationPosted: false\n        }\n    }\n    postValues(value){\n        this.setState({informationPosted:true});\n        this.props.onUserDataUpdate(value, \"general\");\n        \n        axios.post(\"http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/onboard/contact\", {\n            name: value.name,\n            phone: value.phone,\n            email: value.email,\n            website: value.website,\n            linkedin: value.linkedin,\n            github: value.github\n        })\n            .then(res => { //successful PUT\n                console.log(res)\n                // this.setState({informationPosted:true});\n                // this.props.onUserDataUpdate(value, \"general\");\n            })\n            .catch(error => { //error occurred\n                console.error(error);\n            });\n    }\n\n\n    handleSubmit(value) {\n        this.postValues(value);        \n    }\n\n    render() {\n        if(this.state.informationPosted){\n            return <Redirect to='/onboarding/education'/>\n        }\n        return (\n            <Formik\n                    initialValues={{\n                        name: '',\n                        phone: '',\n                        email: '',\n                        website: '',\n                        linkedin: '',\n                        github: '',\n                        \n                    }}\n                    validationSchema={this.validationSchema}\n                    onSubmit={(values) => (this.handleSubmit(values))}\n                >\n                    {({\n                        handleSubmit,\n                        handleChange,\n                        handleBlur,\n                        values,\n                        touched,\n                        errors,\n                    }) => (\n                        <Form className=\"onboarding-form\" onSubmit={handleSubmit}>\n                            <h1 className=\"form-title\">General Information</h1>\n                            <Form.Row>\n                                <Form.Group as={Col} md={8} controlId=\"name\">\n                                    <Form.Label className=\"form-label\">Full name</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.name}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.name && !errors.name}\n                                        isInvalid={touched.name && errors.name}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.name && errors.name}</Form.Text>\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"phone\">\n                                    <Form.Label className=\"form-label\">Phone Number</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        value={values.phone}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.phone && !errors.phone}\n                                        isInvalid={ touched.phone && errors.phone}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.phone && errors.phone}</Form.Text>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"email\">\n                                    <Form.Label className=\"form-label\">Email</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"email\"\n                                        value={values.email}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.email && !errors.email}\n                                        isInvalid={touched.email && errors.email}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.email && errors.email}</Form.Text>\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"website\">\n                                    <Form.Label className=\"form-label\">Personal Website</Form.Label>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"url\"\n                                        placeholder=\"http://www.personal-website.com\"\n                                        value={values.website}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.webstie && !errors.website}\n                                        isInvalid={touched.website && errors.website}\n                                    />\n                                    <Form.Text className=\"form-error-text\">{touched.website && errors.website}</Form.Text>\n                                </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                            <Form.Group as={Col} controlId=\"linkedin\">\n                                    <Form.Label className=\"form-label\">LinkedIn</Form.Label>\n                                    <InputGroup className=\"form-input\">\n                                        <InputGroup.Prepend className=\"form-label\">\n                                        <InputGroup.Text>@</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                    <Form.Control\n                                        className=\"form-input\"\n                                        type=\"text\"\n                                        placeholder=\"Username\"\n                                        value={values.linkedin}\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        isValid={touched.linkedin && !errors.linkedin}\n                                        isInvalid={touched.linkedin && errors.linkedin}\n                                    />\n                                    </InputGroup>\n                                    <Form.Text className=\"form-error-text\">{touched.linkedin && errors.linkedin}</Form.Text>\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"github\">\n                                    <Form.Label className=\"form-label\">Github</Form.Label>\n                                    <InputGroup >\n                                        <InputGroup.Prepend>\n                                        <InputGroup.Text>@</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <FormControl \n                                            className=\"form-input\"\n                                            value={values.github}\n                                            onChange={handleChange}\n                                            onBlur={handleBlur} \n                                            placeholder=\"Username\"\n                                            isValid={touched.github && !errors.github}\n                                            isInvalid={touched.github && errors.github}\n                                        />\n                                    </InputGroup>\n                                </Form.Group>\n                            </Form.Row>\n                            <div className=\"form-footer\">\n                                <Button \n                                    type=\"submit\"\n                                    variant=\"light-accent\" \n                                    className=\"onboarding-form-btn text-white ml-auto\"\n                                >\n                                    Next\n                                </Button>\n                            </div>\n                        </Form>\n                    )}\n                </Formik>\n        )\n    }\n}","import React from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport './Onboarding.scss';\n\nexport default function OnboardingMenu(props) {\n    const links = [\n        {\n            label: \"Contact Information\",\n            link: \"/general\"\n        },\n        {\n            label: \"Education\",\n            link: \"/education\"\n        },\n        {\n            label: \"Experience\",\n            link: \"/experience\"\n        },\n        {\n            label: \"Skills\",\n            link: \"/skills\"\n        },\n        {\n            label: \"Projects\",\n            link: \"/projects\"\n        }\n    ];\n    const location = useLocation();\n    \n    return (\n        <Nav activeKey={location.pathname} className=\"onboarding-nav flex-column\">\n            {links.map((link, index) => {\n                return (\n                    <Nav.Link \n                        as={Link} \n                        to={props.url + \"\" + link.link}\n                        eventKey={props.url + \"\" + link.link}\n                        key={`onboarding-link-${index}`}\n                        className={OnboardingPageFilled(index, props.progress)}\n                        disabled={true}\n                        // !props.progress.includes(index)\n                    >\n                        <OnboardingNumber number={index+1}/>\n                        {link.label}\n                    </Nav.Link>\n                )\n            })}\n        </Nav>\n    );\n}\n\nfunction OnboardingNumber(props) {\n    return (\n        <div className=\"onboarding-nav-number mr-2\">\n            {props.number}\n        </div>\n    );\n}\n\nfunction OnboardingPageFilled(index, progress) {\n    if (progress.includes(index))\n        return \"onboarding-nav-link filled\";\n    return \"onboarding-nav-link\";\n}","import React, { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport ProjectsInputOnboarding from './Project/ProjectInputOnboarding';\nimport ProjectsOnboarding from './Project/ProjectsOnboarding';\nimport SkillsOnboarding from './Skills/SkillsOnboarding';\nimport ExperienceInputOnboarding from './Experience/ExperienceInputOnboarding';\nimport ExperienceOnboarding from './Experience/ExperienceOnboarding';\nimport EducationInputOnboarding from './Education/EducationInputOnboarding';\nimport EducationOnboarding from './Education/EducationOnboarding';\nimport GeneralOnboarding from './General/GeneralOnboarding';\nimport OnboardingMenu from './OnboardingMenu';\nimport Page from '../Page/Page';\nimport Home from '../Home/Home';\nimport Login from '../Login/Login';\nimport Header from '../Components/Header';\n\nexport default function OnboardingPage(props) {\n    const [progress, setProgress] = useState([0]);\n    const [from, setFrom] = useState([]);\n    let { path, url } = useRouteMatch();\n    let loggedIn = sessionStorage.getItem('loggedIn');\n\n    function updateProgress() {\n        setProgress(progress => [...progress, progress.length]);\n    }\n\n    function handleUserDataUpdate(obj, origin) {\n        if(!from.includes(origin)) {\n            updateProgress();\n            setFrom(from => [...from, origin]);\n        }\n    }\n    \n\n    if(loggedIn === \"true\"){\n        return(\n            <Page>\n                <Col>\n                    <Row>\n                        <Header/>\n                    </Row>\n                    <Row>\n                        <Col md={4}> \n                            <OnboardingMenu progress={progress} url={url}/>\n                        </Col>\n                        <Col className=\"onboarding-form-wrapper\">\n                            <Switch>\n                                <Route path={`${path}/general`}>\n                                    <GeneralOnboarding onUserDataUpdate={handleUserDataUpdate}/>\n                                </Route>\n                                <Route path={`${path}/education/create`} component={EducationInputOnboarding}/>\n                                <Route path={`${path}/education/:eduId`} component={EducationInputOnboarding}/>\n                                <Route path={`${path}/education`}>\n                                    <EducationOnboarding onUserDataUpdate={handleUserDataUpdate}/>\n                                </Route>\n                                <Route path={`${path}/experience/create`} component={ExperienceInputOnboarding}/>\n                                <Route path={`${path}/experience/:jobId`} component={ExperienceInputOnboarding}/>\n                                <Route path={`${path}/experience`}>\n                                    <ExperienceOnboarding onUserDataUpdate={handleUserDataUpdate}/>\n                                </Route>\n                                <Route path={`${path}/skills`}>\n                                    <SkillsOnboarding onUserDataUpdate={handleUserDataUpdate}/>\n                                </Route>\n                                <Route path={`${path}/projects/create`} component={ProjectsInputOnboarding}/>\n                                <Route path={`${path}/projects/:projectId`} component={ProjectsInputOnboarding}/>\n                                <Route path={`${path}/projects`}>\n                                    <ProjectsOnboarding onUserDataUpdate={handleUserDataUpdate}/>\n                                </Route>\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Col>\n            </Page>\n        );\n    }else{\n        return(<Login></Login>)\n    }\n}","export default __webpack_public_path__ + \"static/media/mailbox_illustration.3d92957b.svg\";","import React from 'react';\nimport illustration from '../svgs/mailbox_illustration.svg';\n\nexport default function Home_illustration(props) {\n    return(\n        <img src={illustration} style={{height: props.size, width: props.size}}/>\n    );\n}","import { jsPDF } from 'jspdf';\nimport axios from 'axios';\n\n// constants for font\nconst font = \"Helvetica\",\n    font_size = 11,\n    heading_font_size = font_size * 2;\n\n// constants for printing\nconst doc_width = 210,\n    doc_height = 297,\n    center = doc_width/2,\n    margin = 20,\n    indent = 10,\n    max_line_width = doc_width - 2 * margin,\n    pts_per_mm = 2.835, // baseline to top of letter\n    line_height = 1.15,\n    one_line_height = (font_size * line_height) / pts_per_mm,\n    max_printed_lines = (doc_height - 2 * margin) / one_line_height + 1; // +1 because name doesn't print exactly under the margin; makes the margins more equal\n\n// shared variables\nvar lines_printed = 0,\n    lines_to_print,\n    current_y = margin + one_line_height;\nvar doc = new jsPDF(); // a4 paper, portrait, using millimeters for units\n\nexport default async function createResume(user_email, desc, order = [\"education\", \"skills\", \"experience\", \"projects\"]) {\n    \n    let data = await getUserData(user_email, desc);\n\n    // user data\n    let name = data.contact.name,\n        email = data.contact.email,\n        phone = data.contact.phone,\n        website = data.contact.website,\n        githubUsername = data.contact.github,\n        linkedInUsername = data.contact.linkedIn;\n    let educations = data.education,\n        jobs = data.experience,\n        projects = data.projects,\n        skills = data.skills;\n\n    // formatting of US phone numbers -- (000) 000-0000\n    let formatted_phone = phone.length == 10 ? `(${phone.slice(0,3)}) ${phone.slice(3,6)}-${phone.slice(6,10)}` : phone;\n\n    // name\n    doc.setFont(font, \"bold\"); // bold font\n    doc.setFontSize(heading_font_size);\n    doc.text(`${name}`, center, current_y, {align: \"center\"});\n    update_y();\n    lines_printed += 1; // update_y incremenets lines printed by 1; 1 more is needed b/c name is twice the font size\n    \n    // contact information\n    doc.setFont(font, \"normal\"); // unbold font\n    doc.setFontSize(font_size);\n    doc.text([`${email} | ${formatted_phone} | Website: ${website}`, `Github: github.com/${githubUsername} | LinkedIn: linkedin.com/in/${linkedInUsername}`], center, current_y, {align: \"center\"});\n    update_y(3); // 2 lines for email/phone/website and github/linkedin\n                 // 1 line = blank line\n\n    order.map(content => {\n        switch (content){\n            case \"education\":\n                if(educations.length > 0) {\n                    lines_to_print = 1;\n                    if(lines_printed + lines_to_print <= max_printed_lines) {\n                        doc.text(\"Education:\", margin, current_y);\n                        update_y();\n                    }\n                    // print all educations\n                    educations.map(edu => {\n                        printEducation(edu);\n                    });\n                }\n                break;\n            case \"skills\":\n                if(skills.length > 0) {\n                    printSkills(skills);\n                }\n                break;\n            case \"experience\":\n                if(jobs.length > 0) {\n                    lines_to_print = 1;\n                    if(lines_printed + lines_to_print <= max_printed_lines) {\n                        doc.text(\"Experience:\", margin, current_y);\n                        update_y();\n                    }\n                    // print all work experiences\n                    jobs.map(job => {\n                        printExperience(job);\n                    });\n                }\n                break;\n            case \"projects\":\n                if(projects.length > 0) {\n                    lines_to_print = 1;\n                    if(lines_printed + lines_to_print <= max_printed_lines) {\n                        doc.text(\"Projects:\", margin, current_y);\n                        update_y();\n                    }\n                    // print all projects\n                    projects.map(prj => {\n                        printProject(prj);\n                    });\n                }\n                break;\n            default:\n                console.error(`Invalid resume order param: ${content}`);\n        }\n    });\n\n    // prompt user to save pdf\n    doc.save(\"resume.pdf\"); \n\n    //clear and create new PDF for next file\n    lines_printed = 0;\n    lines_to_print = 0;\n    current_y = margin + one_line_height;\n    doc = new jsPDF();\n}\n\nasync function getUserData(user_email, desc) {\n    let data = await axios.get('http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/resume/build', {\n            params: {\n                email: user_email,\n                description: desc\n            }\n        })\n            .then(res => {\n                console.log(res.data);\n                return res.data;\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    return data;\n}\n\n/* Helper function to update the y position\n * adds the correct spacing acccording to\n * num_lines\n */\nfunction update_y(num_lines = 1) {\n    current_y += one_line_height * num_lines;\n    lines_printed += num_lines;\n}\n\nfunction printSkills(skills) {\n    // calculate num of lines for skills -- multilined list separated by commas\n    let comma_sep_list = doc.splitTextToSize(skills.join(\", \"), max_line_width - indent);\n\n    lines_to_print = 1 + comma_sep_list.length; // 1 = \"skills\" title\n                                                // length is number of lines to needed to fit skills \n\n    // print title and skills\n    if(lines_printed + lines_to_print <= max_printed_lines) {\n        doc.text(\"Skills:\", margin, current_y);\n        doc.text(comma_sep_list, margin + calcTitleLength(\"Skills:\", false) + 1, current_y); // 1mm for padding\n        update_y(comma_sep_list.length);\n    }   \n}\n\nfunction printEducation(edu) {\n    lines_to_print = 2; // 2 lines for school/city/state and degree/gpa/grad_date\n    if(lines_printed + lines_to_print <= max_printed_lines) {\n        // school, city, state -- on the same line\n        doc.setFont(font, \"bold\"); // bold font\n        doc.text(edu.school, margin, current_y);\n        doc.text(edu.country, doc_width - margin, current_y, {align: \"right\"});\n        doc.setFont(font, \"normal\"); // unbold font\n        update_y();\n\n        // degree, gpa, graduation date -- on the same line\n        doc.setFont(font, \"italic\"); // italics font\n        doc.text(`${edu.degree} in ${edu.major}, GPA: ${edu.gpa}`, margin, current_y);\n        doc.text(`${dateToText(edu.end_date, \"MM-YYYY\")}`, doc_width - margin, current_y, {align: \"right\"});        \n        doc.setFont(font, \"normal\"); // unitalics font\n        update_y();\n    }\n\n    var titles = {\n        \"Achievements:\": edu.achievements,\n        \"Coursework:\": edu.coursework,\n        \"Activities:\": edu.activities\n    };\n\n    // calculate the longest printed word -- uses current doc settings -- used in calculating hanging indent\n    let longest_printed_word = calcTitleLength(Object.keys(titles).sort((a, b) => calcTitleLength(b) - calcTitleLength(a))[0]);\n    \n    // print achievements, coursework, activities\n    for(const [key, value] of Object.entries(titles)) {\n        console.log(key, value);\n        printTitledList(key, value, indent, longest_printed_word);\n    }\n}\n\n/*\n * Helper function to print a \"titled\" list\n * prints title and\n * prints indented list (separated by commas)\n */\nfunction printTitledList(title, list, indent_size = 0, hanging_indent = calcTitleLength(title)) {\n    if (list.length > 0) {\n        // calculate number of lines to print\n        let title_length = hanging_indent + 1;  // length of title in mm when printed\n                                                // 1 mm for padding\n        // multilined list separated by commas\n        let comma_sep_list = doc.splitTextToSize(list, max_line_width - indent_size - title_length);\n        \n        lines_to_print = 1 + comma_sep_list.length; // 1 = title\n                                                    // length is number of lines to needed to fit list\n        // print title and list\n        if(lines_printed + lines_to_print <= max_printed_lines) {\n            // title\n            doc.setFont(font, \"bold\"); // bold font\n            doc.text(title, margin + indent_size, current_y);\n            doc.setFont(font, \"normal\"); // unbold font\n\n            // list\n            doc.text(comma_sep_list, margin + indent_size + title_length, current_y);\n            update_y(comma_sep_list.length);\n        }\n    }\n}\n\nfunction calcTitleLength(title, bolded = true) {\n    if(bolded) { doc.setFont(font, \"bold\"); } // bold font\n    let length = doc.getTextWidth(title);\n    if(bolded) { doc.setFont(font, \"normal\"); } // unbold font \n    \n    return length;\n}\n\nfunction printExperience(job) {\n    lines_to_print = 1;  // 1 lines for title/start/end_date and company/location\n    if(lines_printed + lines_to_print <= max_printed_lines) {\n        // job title, start & end date -- on the same line\n        doc.setFont(font, \"bold\"); // bold font\n        doc.text(`${job.title} @ ${job.company}, San Francisco, CA`, margin, current_y);\n        doc.text(`${dateToText(job.start_date, \"MM-YYYY\")} - ${dateToText(job.end_date, \"MM-YYYY\")}`, doc_width - margin, current_y, {align: \"right\"});\n        doc.setFont(font, \"normal\"); // unbold font\n        update_y();\n\n        // achievements\n        printBulletedList(job.achievements, indent/2);\n    }\n}\n\nfunction printProject(prj) {\n    lines_to_print = 1; // 1 line for name/start/end_date\n    \n    if(lines_printed + lines_to_print <= max_printed_lines) {\n        // project name, begin & end date -- on the same line\n        doc.setFont(font, \"bold\"); // bold font\n        doc.text(prj.title, margin, current_y);\n        doc.text(`${dateToText(prj.start_date, \"MM-YYYY\")} - ${dateToText(prj.end_date, \"MM-YYYY\")}`, doc_width - margin, current_y, {align: \"right\"});\n        doc.setFont(font, \"normal\"); // unbold font\n        update_y();\n\n        // project description\n        printBulletedList(prj.description, indent/2);\n    }\n}\n\nfunction printBulletedList(list, indent_size, delimiter = \". \") {\n    // split list by sentences\n    let sentences = list.split(delimiter);\n    let num_of_lines = 0;\n\n    // resize sentences to fit length of page\n    let long_sentences = [];\n    sentences.map(sent => {\n        let temp_arr = doc.splitTextToSize(sent, max_line_width - indent_size - calcTitleLength('\\u2022 ', false));\n        long_sentences.push(temp_arr);\n        num_of_lines += temp_arr.length;\n    });\n\n    lines_to_print = num_of_lines;\n    if(lines_printed + lines_to_print <= max_printed_lines) {\n        // achievements\n        long_sentences.map(sent => {\n            // print bullet\n            doc.text('\\u2022 ', margin + indent_size, current_y);\n            // print sentences with hanging indent\n            doc.text(sent, margin + indent_size + calcTitleLength('\\u2022 ', false), current_y);\n            update_y(sent.length);\n        });\n    }\n}\n\n/* Helper function\n * converts dates in formats:\n * MM-YYYY and MM-DD-YYYY\n * to their text equivalents (ie. it spells out the month)\n */\nfunction dateToText(date, format) {\n    const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    var formatted_date = '';\n    var month = null;\n\n    switch(format) {\n        case \"MM-DD-YYYY\":\n            // check if month value is valid\n            if(parseInt(date.substring(0,2)) - 1 >= 0 && parseInt(date.substring(0,2)) - 1 < 12) {\n                month = months[parseInt(date.substring(0,2)) - 1];\n            }\n            formatted_date = `${month} ${date.substring(6)}`;\n            break;\n        case \"MM-YYYY\":\n            // check if month value is valid\n            if(parseInt(date.substring(0,2)) - 1 >= 0 && parseInt(date.substring(0,2)) - 1 < 12) {\n                month = months[parseInt(date.substring(0,2)) - 1];\n            }\n            \n            formatted_date = `${month} ${date.substring(3)}`;\n            break;\n        default:\n            formatted_date = \"Error: unsupported format\";\n    }\n\n    return formatted_date;\n}","import React from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\n/* components */\nimport Page from '../Page/Page'\nimport Header from '../Components/Header';\nimport Footer from '../Components/Footer';\n\n/* svgs */\nimport Illustration from '../illustrations/Mailbox_illustration'\nexport default class Verify extends React.Component {\n    render() {\n        return(\n            <Page>\n                <Header/>\n                <Col className=\"verify-email-information text-center\">\n                    <h1>Email Verification</h1>\n                    <h5 className=\"text-light-accent\">Please check your email for a verification link</h5>\n                    <Row style={{justifyContent: \"center\"}}>\n                        <Illustration size=\"23rem\"></Illustration>\n                    </Row>\n                </Col>\n                <Footer/>\n            </Page>\n        );\n    }\n}\n","import React from 'react';\nimport { Badge, Button, Card, Col, Row, Accordion } from 'react-bootstrap';\nimport createResume from '../PDF/PDF';\n\nexport default function JobCard(props) {\n    function handleClick(e){\n        e.preventDefault();\n        \n        let email = sessionStorage.getItem('email');\n        createResume(email, props.description);\n    }\n\n    return ( \n        <Card className=\"results-card\">\n            <Row>\n                <Col md={4}>\n                    <Card.Header className=\"card-header\">\n                        <h1 className=\"company-title\">{props.company}</h1>\n                    </Card.Header>\n                    <Card.Body className=\"card-body\">\n                        <h5>\n                            <Badge pill variant=\"main-brand\" className=\"info\">{props.position}</Badge>\n                        </h5>\n                        <h5>\n                            <Badge pill variant=\"dark-accent\" className=\"info\">{props.city}</Badge>\n                        </h5>\n                        <h5>\n                            <Badge pill variant=\"light-accent\" className=\"info\">Percent Match: {props.score}%</Badge>\n                        </h5>\n                    </Card.Body>\n                </Col>\n                <Col md={6}>\n                    <Accordion>\n                        <Card>\n                            <Card.Header className=\"card-header\">\n                                <Accordion.Toggle as={Button} variant=\"dark-accent\" className=\"text-white\" eventKey=\"1\">\n                                    View Description \n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body className=\"card-body job-description y-scrollable\">\n                                    {props.description}  \n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                     </Accordion>                    \n                </Col>\n                <Col className=\"card-btns\">\n                    <Button onClick={handleClick} variant=\"dark-shade\">\n                        Tailored Resume\n                    </Button>\n                    {/* <Button as={Link} to={props.link} variant=\"light-accent\" className=\"text-white mt-2\">\n                        Apply\n                    </Button> */}\n                </Col>\n            </Row>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport default function Loading(props) {\n    return (\n        <div className=\"loading-page\">\n            <div className=\"loading-box\">\n                <Spinner animation=\"grow\" variant=\"main-brand\" className=\"mt-2\" />\n                <h1 className=\"ml-2\">Gathering Information</h1>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './Results.scss';\nimport axios from 'axios';\n\nimport JobCardResult from \"./JobCardResult\"\nimport Loading from \"./Loading\"\nimport Page from '../Page/Page';\nimport NavBar from '../NavBar/NavBar';\n\nexport default class Results extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobs: [],\n            informationPosted: false\n        };\n    }\n\n    componentDidMount() {\n        const params = {\n            email: sessionStorage.getItem('email'),\n            url: this.props.match.params.url.replaceAll('%2F', '/')\n        };\n        \n        axios.get(`http://ec2-54-193-142-115.us-west-1.compute.amazonaws.com/scrape`, { params })\n            .then(res => {\n                console.log(res.data[0]);\n                const jobs = res.data;\n                this.setState({ jobs });\n            });\n    }\n    \n    render() {\n        return !this.state.jobs.length ?\n        <Loading /> :\n        ( \n            <Page>\n                <NavBar/>\n                <div className=\"results-header\">\n                    <h1 className=\"header-title\"> Job Search Results</h1>\n                </div>\n                <div className=\"results-container\">\n                {this.state.jobs.map(job => {\n                        return (\n                        <JobCardResult \n                            company={job.company}\n                            position={job.Title}\n                            city={job.location}\n                            description={job.Description}\n                            score={job.score}\n                        />\n                        );\n                    })}\n                </div>\n            </Page>\n        );\n     }\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n/* components */\nimport Home from '../Home/Home';\nimport Search from '../Search/Search';\nimport SignUp from '../SignUp/SignUp';\nimport Login from '../Login/Login';\nimport OnboardingPage from '../Onboarding/OnboardingPage';\nimport Verify from '../SignUp/Verify';\nimport Results from '../Results/Results';\n\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            \n            <Route exact path=\"/signup\" component={SignUp}/>\n            <Route exact path=\"/login\" component={Login}/>\n            <Route exact path=\"/verify-email\" component={Verify}/>\n            <Route path=\"/onboarding\" component={OnboardingPage}/>\n\n            <Route exact path=\"/search\" component={Search}/>\n            <Route path=\"/results/:url\" component={Results}/>\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}